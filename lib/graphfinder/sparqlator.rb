#!/usr/bin/env ruby
module GraphFinder; end unless defined? GraphFinder


# Generate variations of a graph pattern using the triple variation operations.
class GraphFinder::Sparqlator

  DEFAULT_TEMPLATE = 'SELECT * WHERE { _BGP_ }'
  SORTAL_PREDICATES = ["rdf:type", "rdfs:Class"]

  # This method takes as arguments
  # - an anchored pseudo graph pattern (apgp),
  # - a SPARQL template (template), and
  # - optionally a hash of option specifications (options).
  # The marker, _BGP_, in the template will be replaced by various
  # BGP patterns generated by this method.
  # At the moment the template is supposed to have only one BGP.
  # The apgp is supposed to be a structural repesentation of the BGP.
  # From the gp, many variations of the BGP will be generated, and
  # they will replace the BGP to produce variations of SPARQL queries.
  def initialize (apgp, template = nil, options = {})
    raise ArgumentError, "An anchored PGP needs to be passed" if apgp.nil?

    options ||= {}
    @apgp = apgp
    @template = template || DEFAULT_TEMPLATE
    @ignore_predicates = options[:ignore_predicates] || []
    @sortal_predicates = options[:sortal_predicates] || SORTAL_PREDICATES
    max_hop = options[:max_hop] || 2

    @s_var = 0
    @p_var = 0
    @x_var = 0

    @bgps = gen_bgps(apgp, max_hop)
  end

  def sparql_queries
    @bgps.map{|bgp| compose_sparql(bgp, @template, @apgp)}
  end

  private

  # It generates bgps by applying variation operations to the apgp.
  # The option _max_hop_ specifies the maximum number of hops to be searched.
  def gen_bgps (apgp, max_hop = 1)
    bgp  = generate_initial_bgp(apgp)
    bgps = generate_split_variations(bgp, max_hop)
    bgps = generate_inverse_variations(bgps)
    bgps = generate_instantiation_variations(bgps, apgp)
    bgps
  end

  def generate_initial_bgp(apgp)
    r = apgp['relations']
    bgp = r.keys.map do |rid|
      # be careful for the naming convention of variables
      p = (r[rid]['type'] == 'gf:Sortal')? 's' + r[rid]["object"] : rid
      [r[rid]["subject"], p,  r[rid]["object"]]
    end
    bgp
  end

  def generate_split_variations(bgp, max_hop)
    bgps = []

    tps_to_split = bgp.reject{|tp| tp[1][0] == 's'}

    # split and make bgps
    (1 .. max_hop).to_a.repeated_permutation(tps_to_split.length) do |split_scheme|
      full_scheme = bgp.map{|t| (t[1][0] == 's')? 1 : split_scheme.shift}
      bgps << generate_split_bgp(bgp, full_scheme)
    end

    bgps
  end

  def generate_split_bgp(bgp, split_scheme)
    sbgp = []
    bgp.each_with_index do |tp, i|
      if split_scheme[i] == 1
        sbgp << tp
      else
        x_variables = (1 ... split_scheme[i]).collect{|j| ("x#{i}#{j}").to_s}
        p_variables = (1 .. split_scheme[i]).collect{|j| ("p#{i}#{j}").to_s}

        # terms including x_variables and the initial and the final terms
        terms = [tp[0], x_variables, tp[2]].flatten

        # triple patterns
        tps = (0 ... p_variables.length).collect{|k| [terms[k], p_variables[k], terms[k + 1]]}
        sbgp += tps
      end
    end
    sbgp
  end

  # make variations by inversing each triple pattern
  def generate_inverse_variations (bgps)
    rbgps = []

    bgps.each do |bgp|

      tps_to_inverse = bgp.reject{|tp| tp[1][0] == 's'}

      [false, true].repeated_permutation(tps_to_inverse.length) do |inverse_scheme|
        full_scheme = bgp.map{|tp| (tp[1][0] == 's')? false : inverse_scheme.shift}
        rbgps << bgp.map.with_index {|tp, i| full_scheme[i]? tp.reverse : tp}
      end
    end

    rbgps
  end

  # make variations by instantiating terms
  def generate_instantiation_variations(bgps, apgp)
    iids = {}
    apgp["nodes"].each do |id, node|
      iid = instantiable?(id, apgp) ? 'i' + id : nil
      iids[id] = iid unless iid.nil?
    end

    ibgps = []
    bgps.each do |bgp|

      [false, true].repeated_permutation(iids.keys.length) do |instantiate_scheme|
        # id of the terms to be instantiated
        itids = iids.keys.keep_if.with_index{|t, i| instantiate_scheme[i]}

        # initialize the instantiated bgp with the triple patterns for term instantiation
        ibgp = itids.collect{|t| [iids[t], 's' + t.to_s, t.to_s]}

        # add update triples
        bgp.each{|tp| ibgp << tp.map{|e| itids.include?(e)? iids[e] : e}}

        ibgps << ibgp
      end
    end

    ibgps
  end

  def instantiable?(tid, apgp)
    # step 1. false if tid is already instantiated in the APGP
    apgp['relations'].each {|rid, r| return false if r['type'] == 'gf:Sortal' && r['object'] == tid}

    # step 2. true if the term is annotated as owl:Class. This step is dependent on step 1.
    return true if apgp['nodes'][tid]['type'] == 'owl:Class'

    return false
  end

  # def class?(term)
  #   if /^http:/.match(term)
  #     sparql = "SELECT ?p WHERE {?s ?p <#{term}> FILTER (str(?p) IN (#{@sortal_predicates.map{|s| '"'+s+'"'}.join(', ')}))} LIMIT 1"
  #     result = @endpoint.query(sparql)
  #     return true if result.length > 0
  #   end
  #   return false
  # end

  def compose_sparql(bgps, template, apgp)
    nodes = apgp['nodes']

    # get the variables
    variables = bgps.flatten.uniq - nodes.keys

    # initialize the body of the query
    body = ''

    # stringify the bgps
    body += bgps.map{|tp| tp.map{|e| (nodes[e].nil? || nodes[e].empty?) ? '?' + e : "#{nodes[e]['term']}"}.join(' ')}.join(' . ') + ' .'

    ## constraints on x-variables (including i-variables)
    x_variables = variables.dup.keep_if {|v| v[0] == 'x' or v[0] == 'i'}

    # x-variables to be bound to IRIs
    # body += " FILTER (" + x_variables.map{|v| "isIRI(#{'?'+v})"}.join(" && ") + ")" if x_variables.length > 0

    # x-variables to be bound to different IRIs
    x_variables.combination(2) {|c| body += " FILTER (#{'?'+c[0]} != #{'?'+c[1]})"} if x_variables.length > 1

    ## constraintes on p-variables
    p_variables = variables.dup.keep_if{|v| v[0] == 'p'}

    # initialize exclude predicates
    ex_predicates = []

    # filter out ignore predicates
    ex_predicates += @ignore_predicates

    # filter out sotral predicates
    ex_predicates += @sortal_predicates

    unless ex_predicates.empty?
      p_variables.each {|v| body += %| FILTER (?#{v} NOT IN (#{ex_predicates.map{|s| s}.join(', ')}))|}
    end

    ## constraintes on s-variables
    s_variables = variables.dup.keep_if{|v| v[0] == 's'}

    # s-variables to be bound to sortal predicates
    s_variables.each {|v| body += %| FILTER (?#{v} IN (#{@sortal_predicates.map{|s| s}.join(', ')}))|}

    template.gsub(/_BGP_/, body)
  end

  def stringify_term (t)
    if (t.class == RDF::URI)
      %|<#{t.to_s}>|
    elsif (t.class == RDF::Literal)
      if (t.datatype.to_s == "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString")
        %|"#{t.to_s}"@en|
      else
        t.to_s
      end
    else
      %|?#{t}|
    end
  end

end